// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace UiPath.Web.Client20184
{
    using Models;
    using System.IO;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Settings.
    /// </summary>
    public static partial class SettingsExtensions
    {
            /// <summary>
            /// Gets the settings.
            /// </summary>
            /// <remarks>
            /// Required permissions: Settings.View.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='expand'>
            /// Expands related entities inline.
            /// </param>
            /// <param name='filter'>
            /// Filters the results, based on a Boolean condition.
            /// </param>
            /// <param name='select'>
            /// Selects which properties to include in the response.
            /// </param>
            /// <param name='orderby'>
            /// Sorts the results.
            /// </param>
            /// <param name='top'>
            /// Returns only the first n results.
            /// </param>
            /// <param name='skip'>
            /// Skips the first n results.
            /// </param>
            /// <param name='count'>
            /// Includes a count of the matching results in the response.
            /// </param>
            public static ODataResponseListSettingsDto GetSettings(this ISettings operations, string expand = default(string), string filter = default(string), string select = default(string), string orderby = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?))
            {
                return operations.GetSettingsAsync(expand, filter, select, orderby, top, skip, count).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the settings.
            /// </summary>
            /// <remarks>
            /// Required permissions: Settings.View.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='expand'>
            /// Expands related entities inline.
            /// </param>
            /// <param name='filter'>
            /// Filters the results, based on a Boolean condition.
            /// </param>
            /// <param name='select'>
            /// Selects which properties to include in the response.
            /// </param>
            /// <param name='orderby'>
            /// Sorts the results.
            /// </param>
            /// <param name='top'>
            /// Returns only the first n results.
            /// </param>
            /// <param name='skip'>
            /// Skips the first n results.
            /// </param>
            /// <param name='count'>
            /// Includes a count of the matching results in the response.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ODataResponseListSettingsDto> GetSettingsAsync(this ISettings operations, string expand = default(string), string filter = default(string), string select = default(string), string orderby = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetSettingsWithHttpMessagesAsync(expand, filter, select, orderby, top, skip, count, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a settings value based on its key.
            /// </summary>
            /// <remarks>
            /// Required permissions: Settings.View.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// key: Id
            /// </param>
            /// <param name='expand'>
            /// Expands related entities inline.
            /// </param>
            /// <param name='select'>
            /// Selects which properties to include in the response.
            /// </param>
            public static SettingsDto GetSettingsById(this ISettings operations, string id, string expand = default(string), string select = default(string))
            {
                return operations.GetSettingsByIdAsync(id, expand, select).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a settings value based on its key.
            /// </summary>
            /// <remarks>
            /// Required permissions: Settings.View.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// key: Id
            /// </param>
            /// <param name='expand'>
            /// Expands related entities inline.
            /// </param>
            /// <param name='select'>
            /// Selects which properties to include in the response.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SettingsDto> GetSettingsByIdAsync(this ISettings operations, string id, string expand = default(string), string select = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetSettingsByIdWithHttpMessagesAsync(id, expand, select, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Edits a setting.
            /// </summary>
            /// <remarks>
            /// Required permissions: Settings.Edit.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// key: Id
            /// </param>
            /// <param name='settingsDto'>
            /// The entity to put
            /// </param>
            public static SettingsDto PutById(this ISettings operations, string id, SettingsDto settingsDto)
            {
                return operations.PutByIdAsync(id, settingsDto).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Edits a setting.
            /// </summary>
            /// <remarks>
            /// Required permissions: Settings.Edit.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// key: Id
            /// </param>
            /// <param name='settingsDto'>
            /// The entity to put
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SettingsDto> PutByIdAsync(this ISettings operations, string id, SettingsDto settingsDto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.PutByIdWithHttpMessagesAsync(id, settingsDto, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a collection of key value pairs representing all service settings
            /// used by a robot. A valid robot license key is required in the request
            /// headers.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static ResponseDictionaryDto GetServicesSettings(this ISettings operations)
            {
                return operations.GetServicesSettingsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a collection of key value pairs representing all service settings
            /// used by a robot. A valid robot license key is required in the request
            /// headers.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResponseDictionaryDto> GetServicesSettingsAsync(this ISettings operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetServicesSettingsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a collection of key value pairs representing settings used by
            /// Orchestrator web client.
            /// </summary>
            /// <remarks>
            /// Requires authentication.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static ResponseDictionaryDto GetWebSettings(this ISettings operations)
            {
                return operations.GetWebSettingsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a collection of key value pairs representing settings used by
            /// Orchestrator web client.
            /// </summary>
            /// <remarks>
            /// Requires authentication.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResponseDictionaryDto> GetWebSettingsAsync(this ISettings operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetWebSettingsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the authentication settings
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static ResponseDictionaryDto GetAuthenticationSettings(this ISettings operations)
            {
                return operations.GetAuthenticationSettingsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the authentication settings
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResponseDictionaryDto> GetAuthenticationSettingsAsync(this ISettings operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetAuthenticationSettingsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the execution settings configuration (display name, value type, etc.).
            /// If scope is 0 (Global), the default values will be the initial ones. If
            /// scope is 1 (Robot), then
            /// the default values will be the actual values set globally.
            /// e.g., Resolution width
            /// Assume it was set globally to 720.
            /// Then within the config returned by this function, the default value for
            /// this setting will be:
            /// - 0 for scope = 0 and
            /// - 720 for scope = 1.
            /// </summary>
            /// <remarks>
            /// Required permissions: Settings.Edit or Robots.Create or Robots.Edit.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// Scope of the configuration; 0 for Global, 1 for Robot
            /// </param>
            public static ExecutionSettingsConfiguration GetExecutionSettingsConfigurationByScope(this ISettings operations, int scope)
            {
                return operations.GetExecutionSettingsConfigurationByScopeAsync(scope).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the execution settings configuration (display name, value type, etc.).
            /// If scope is 0 (Global), the default values will be the initial ones. If
            /// scope is 1 (Robot), then
            /// the default values will be the actual values set globally.
            /// e.g., Resolution width
            /// Assume it was set globally to 720.
            /// Then within the config returned by this function, the default value for
            /// this setting will be:
            /// - 0 for scope = 0 and
            /// - 720 for scope = 1.
            /// </summary>
            /// <remarks>
            /// Required permissions: Settings.Edit or Robots.Create or Robots.Edit.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// Scope of the configuration; 0 for Global, 1 for Robot
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ExecutionSettingsConfiguration> GetExecutionSettingsConfigurationByScopeAsync(this ISettings operations, int scope, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetExecutionSettingsConfigurationByScopeWithHttpMessagesAsync(scope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the connection string
            /// </summary>
            /// <remarks>
            /// Required permissions: Settings.View.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static string GetConnectionString(this ISettings operations)
            {
                return operations.GetConnectionStringAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the connection string
            /// </summary>
            /// <remarks>
            /// Required permissions: Settings.View.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetConnectionStringAsync(this ISettings operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetConnectionStringWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves the current license information.
            /// </summary>
            /// <remarks>
            /// Requires authentication.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static LicenseDto GetLicense(this ISettings operations)
            {
                return operations.GetLicenseAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the current license information.
            /// </summary>
            /// <remarks>
            /// Requires authentication.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LicenseDto> GetLicenseAsync(this ISettings operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetLicenseWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Uploads a new license file that was previously generated with Regutil. The
            /// content of the license is sent as a file embedded in the HTTP request.
            /// </summary>
            /// <remarks>
            /// Required permissions: License.Create or License.Edit.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='file'>
            /// </param>
            public static void UploadLicense(this ISettings operations, Stream file)
            {
                operations.UploadLicenseAsync(file).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Uploads a new license file that was previously generated with Regutil. The
            /// content of the license is sent as a file embedded in the HTTP request.
            /// </summary>
            /// <remarks>
            /// Required permissions: License.Create or License.Edit.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='file'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UploadLicenseAsync(this ISettings operations, Stream file, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                (await operations.UploadLicenseWithHttpMessagesAsync(file, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Removes the license
            /// </summary>
            /// <remarks>
            /// Required permissions: License.Delete.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void DeleteLicense(this ISettings operations)
            {
                operations.DeleteLicenseAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Removes the license
            /// </summary>
            /// <remarks>
            /// Required permissions: License.Delete.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteLicenseAsync(this ISettings operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                (await operations.DeleteLicenseWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets timezones.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static ListResultDtoNameValueDto GetTimezones(this ISettings operations)
            {
                return operations.GetTimezonesAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets timezones.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ListResultDtoNameValueDto> GetTimezonesAsync(this ISettings operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetTimezonesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the current settings.
            /// </summary>
            /// <remarks>
            /// Required permissions: Settings.Edit.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='updateBulkParameters'>
            /// Settings - The collection of settings to be updated.
            /// </param>
            public static SettingsDto UpdateBulk(this ISettings operations, UpdateBulkParameters updateBulkParameters = default(UpdateBulkParameters))
            {
                return operations.UpdateBulkAsync(updateBulkParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the current settings.
            /// </summary>
            /// <remarks>
            /// Required permissions: Settings.Edit.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='updateBulkParameters'>
            /// Settings - The collection of settings to be updated.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SettingsDto> UpdateBulkAsync(this ISettings operations, UpdateBulkParameters updateBulkParameters = default(UpdateBulkParameters), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateBulkWithHttpMessagesAsync(updateBulkParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets supported languages
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetLanguages(this ISettings operations)
            {
                return operations.GetLanguagesAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets supported languages
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetLanguagesAsync(this ISettings operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetLanguagesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets custom calendar, with excluded dates in UTC, for current tenant
            /// </summary>
            /// <remarks>
            /// Required permissions: Settings.View.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static CalendarDto GetCalendar(this ISettings operations)
            {
                return operations.GetCalendarAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets custom calendar, with excluded dates in UTC, for current tenant
            /// </summary>
            /// <remarks>
            /// Required permissions: Settings.View.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CalendarDto> GetCalendarAsync(this ISettings operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetCalendarWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Sets custom calendar, with excluded dates in UTC, for current tenant
            /// </summary>
            /// <remarks>
            /// Required permissions: Settings.Edit.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='calendar'>
            /// </param>
            public static void SetCalendar(this ISettings operations, CalendarDto calendar)
            {
                operations.SetCalendarAsync(calendar).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sets custom calendar, with excluded dates in UTC, for current tenant
            /// </summary>
            /// <remarks>
            /// Required permissions: Settings.Edit.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='calendar'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SetCalendarAsync(this ISettings operations, CalendarDto calendar, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                (await operations.SetCalendarWithHttpMessagesAsync(calendar, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets a settings value based on its key.
            /// </summary>
            /// <remarks>
            /// Required permissions: Settings.View.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// </param>
            public static SettingsDto GetSettingsByKey(this ISettings operations, string key)
            {
                return operations.GetSettingsByKeyAsync(key).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a settings value based on its key.
            /// </summary>
            /// <remarks>
            /// Required permissions: Settings.View.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SettingsDto> GetSettingsByKeyAsync(this ISettings operations, string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetSettingsByKeyWithHttpMessagesAsync(key, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
