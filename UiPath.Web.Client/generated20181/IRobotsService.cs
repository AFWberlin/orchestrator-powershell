// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace UiPath.Web.Client20181
{
    using Microsoft.Rest;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// RobotsService operations.
    /// </summary>
    public partial interface IRobotsService
    {
        /// <summary>
        /// Post to the server a collection of heartbeats messages generated by
        /// the robots from a machine
        /// </summary>
        /// <remarks>
        /// Every 30 seconds the UiPath service running on a robot machine
        /// posts a collection of heartbeat messages (one for each robot hosted
        /// on the machine).
        /// The response is a collection of commands specific to all robots
        /// defined on that machine, including the ones that were added in the
        /// meanwhile.
        /// </remarks>
        /// <param name='hbts'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<IList<RobotCommand>>> SubmitHeartbeatWithHttpMessagesAsync(IList<HeartbeatDto> hbts, Dictionary<string, List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Post to the server a heartbeat collection with jobs information
        /// </summary>
        /// <param name='heartbeats'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse> SubmitJobStateWithHttpMessagesAsync(IList<HeartbeatDto> heartbeats, Dictionary<string, List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets from the server all robots associated with a machine and
        /// having the specified licence key
        /// </summary>
        /// <remarks>
        /// Gets from the server all robots associated with a machine and
        /// having the specified licence key.
        /// </remarks>
        /// <param name='licenseKey'>
        /// The license key that the returned robots must have.
        /// </param>
        /// <param name='machineName'>
        /// The name of the machine that the returned robots must be associated
        /// with
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<IList<RobotDetailsDto>>> GetRobotMappingsWithHttpMessagesAsync(string licenseKey, string machineName, Dictionary<string, List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Called by RobotSvc to connect the robots on the machine it is
        /// running on to Orchestrator (under automatic deployment).
        /// </summary>
        /// <remarks>
        /// This is the initial handshake between the robot service and
        /// Orchestrator, the equivalent of configuring the connection
        /// info from Robot tray (manual deployment). It is supported only for
        /// authorized machines, i.e. the robot machine is part of the
        /// same AD as Orchestrator. To enforce this, the request must contain
        /// the machine identity. The robots must be already provisioned
        /// in Orchestrator before this step, otherwise RobotSvc will continue
        /// to call this method until they are.
        /// </remarks>
        /// <param name='tenantId'>
        /// The tenant under which already defined robots are searched for.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<ConnectionData>> GetConnectionDataWithHttpMessagesAsync(int tenantId, Dictionary<string, List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Acquire a license.
        /// </summary>
        /// <param name='identifier'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse> AcquireLicenseWithHttpMessagesAsync(RobotIdentifier identifier, Dictionary<string, List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Release active license.
        /// </summary>
        /// <param name='identifier'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse> ReleaseLicenseWithHttpMessagesAsync(RobotIdentifier identifier, Dictionary<string, List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets from the server all the processes associated with a robot
        /// </summary>
        /// <remarks>
        /// Gets from the server all the processes associated with a robot
        /// </remarks>
        /// <param name='robotKey'>
        /// The unique key identifying the robot.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<IList<PublishedProcess>>> GetAssociatedProcessesWithHttpMessagesAsync(string robotKey, Dictionary<string, List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    }
}
