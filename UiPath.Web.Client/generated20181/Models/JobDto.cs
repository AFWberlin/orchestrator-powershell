// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace UiPath.Web.Client20181.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Represents a scheduled or manual execution of a process on a robot.
    /// </summary>
    public partial class JobDto
    {
        /// <summary>
        /// Initializes a new instance of the JobDto class.
        /// </summary>
        public JobDto()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the JobDto class.
        /// </summary>
        /// <param name="key">The unique job identifier.</param>
        /// <param name="startTime">The date and time when the job execution
        /// started or null if the job hasn't started yet.</param>
        /// <param name="endTime">The date and time when the job execution
        /// ended or null if the job hasn't ended yet.</param>
        /// <param name="state">The state in which the job is. Possible values
        /// include: 'Pending', 'Running', 'Stopping', 'Terminating',
        /// 'Faulted', 'Successful', 'Stopped'</param>
        /// <param name="robot">The robot associated with the current
        /// job.</param>
        /// <param name="release">The release associated with the current
        /// job.</param>
        /// <param name="source">The Source of the job.</param>
        /// <param name="batchExecutionKey">The unique identifier grouping
        /// multiple jobs. It is usually generated when the job is created by a
        /// schedule.</param>
        /// <param name="info">Additional information about the current
        /// job.</param>
        /// <param name="creationTime">The date and time when the job was
        /// created.</param>
        /// <param name="startingScheduleId">The Id of the schedule that
        /// started the job, or null if the job was started by the
        /// user.</param>
        public JobDto(System.Guid? key = default(System.Guid?), System.DateTime? startTime = default(System.DateTime?), System.DateTime? endTime = default(System.DateTime?), JobDtoState? state = default(JobDtoState?), SimpleRobotDto robot = default(SimpleRobotDto), SimpleReleaseDto release = default(SimpleReleaseDto), string source = default(string), System.Guid? batchExecutionKey = default(System.Guid?), string info = default(string), System.DateTime? creationTime = default(System.DateTime?), long? startingScheduleId = default(long?), long? id = default(long?))
        {
            Key = key;
            StartTime = startTime;
            EndTime = endTime;
            State = state;
            Robot = robot;
            Release = release;
            Source = source;
            BatchExecutionKey = batchExecutionKey;
            Info = info;
            CreationTime = creationTime;
            StartingScheduleId = startingScheduleId;
            Id = id;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the unique job identifier.
        /// </summary>
        [JsonProperty(PropertyName = "Key")]
        public System.Guid? Key { get; set; }

        /// <summary>
        /// Gets or sets the date and time when the job execution started or
        /// null if the job hasn't started yet.
        /// </summary>
        [JsonProperty(PropertyName = "StartTime")]
        public System.DateTime? StartTime { get; set; }

        /// <summary>
        /// Gets or sets the date and time when the job execution ended or null
        /// if the job hasn't ended yet.
        /// </summary>
        [JsonProperty(PropertyName = "EndTime")]
        public System.DateTime? EndTime { get; set; }

        /// <summary>
        /// Gets or sets the state in which the job is. Possible values
        /// include: 'Pending', 'Running', 'Stopping', 'Terminating',
        /// 'Faulted', 'Successful', 'Stopped'
        /// </summary>
        [JsonProperty(PropertyName = "State")]
        public JobDtoState? State { get; set; }

        /// <summary>
        /// Gets or sets the robot associated with the current job.
        /// </summary>
        [JsonProperty(PropertyName = "Robot")]
        public SimpleRobotDto Robot { get; set; }

        /// <summary>
        /// Gets or sets the release associated with the current job.
        /// </summary>
        [JsonProperty(PropertyName = "Release")]
        public SimpleReleaseDto Release { get; set; }

        /// <summary>
        /// Gets or sets the Source of the job.
        /// </summary>
        [JsonProperty(PropertyName = "Source")]
        public string Source { get; set; }

        /// <summary>
        /// Gets or sets the unique identifier grouping multiple jobs. It is
        /// usually generated when the job is created by a schedule.
        /// </summary>
        [JsonProperty(PropertyName = "BatchExecutionKey")]
        public System.Guid? BatchExecutionKey { get; set; }

        /// <summary>
        /// Gets or sets additional information about the current job.
        /// </summary>
        [JsonProperty(PropertyName = "Info")]
        public string Info { get; set; }

        /// <summary>
        /// Gets or sets the date and time when the job was created.
        /// </summary>
        [JsonProperty(PropertyName = "CreationTime")]
        public System.DateTime? CreationTime { get; set; }

        /// <summary>
        /// Gets or sets the Id of the schedule that started the job, or null
        /// if the job was started by the user.
        /// </summary>
        [JsonProperty(PropertyName = "StartingScheduleId")]
        public long? StartingScheduleId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Id")]
        public long? Id { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Robot != null)
            {
                Robot.Validate();
            }
            if (Release != null)
            {
                Release.Validate();
            }
        }
    }
}
