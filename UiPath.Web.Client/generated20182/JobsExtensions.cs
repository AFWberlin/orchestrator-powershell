// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace UiPath.Web.Client20182
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Jobs.
    /// </summary>
    public static partial class JobsExtensions
    {
            /// <summary>
            /// Gets Jobs.
            /// </summary>
            /// <remarks>
            /// Required permissions: Jobs.View.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='expand'>
            /// Expands related entities inline.
            /// </param>
            /// <param name='filter'>
            /// Filters the results, based on a Boolean condition.
            /// </param>
            /// <param name='select'>
            /// Selects which properties to include in the response.
            /// </param>
            /// <param name='orderby'>
            /// Sorts the results.
            /// </param>
            /// <param name='top'>
            /// Returns only the first n results.
            /// </param>
            /// <param name='skip'>
            /// Skips the first n results.
            /// </param>
            /// <param name='count'>
            /// Includes a count of the matching results in the response.
            /// </param>
            public static ODataResponseListJobDto GetJobs(this IJobs operations, string expand = default(string), string filter = default(string), string select = default(string), string orderby = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?))
            {
                return operations.GetJobsAsync(expand, filter, select, orderby, top, skip, count).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets Jobs.
            /// </summary>
            /// <remarks>
            /// Required permissions: Jobs.View.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='expand'>
            /// Expands related entities inline.
            /// </param>
            /// <param name='filter'>
            /// Filters the results, based on a Boolean condition.
            /// </param>
            /// <param name='select'>
            /// Selects which properties to include in the response.
            /// </param>
            /// <param name='orderby'>
            /// Sorts the results.
            /// </param>
            /// <param name='top'>
            /// Returns only the first n results.
            /// </param>
            /// <param name='skip'>
            /// Skips the first n results.
            /// </param>
            /// <param name='count'>
            /// Includes a count of the matching results in the response.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ODataResponseListJobDto> GetJobsAsync(this IJobs operations, string expand = default(string), string filter = default(string), string select = default(string), string orderby = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetJobsWithHttpMessagesAsync(expand, filter, select, orderby, top, skip, count, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Post a new entity to EntitySet Jobs
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobDto'>
            /// The entity to post
            /// </param>
            public static void Post(this IJobs operations, JobDto jobDto)
            {
                operations.PostAsync(jobDto).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Post a new entity to EntitySet Jobs
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobDto'>
            /// The entity to post
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostAsync(this IJobs operations, JobDto jobDto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                (await operations.PostWithHttpMessagesAsync(jobDto, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets a single job.
            /// </summary>
            /// <remarks>
            /// Required permissions: Jobs.View.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// key: Id
            /// </param>
            /// <param name='expand'>
            /// Expands related entities inline.
            /// </param>
            /// <param name='select'>
            /// Selects which properties to include in the response.
            /// </param>
            public static JobDto GetById(this IJobs operations, long id, string expand = default(string), string select = default(string))
            {
                return operations.GetByIdAsync(id, expand, select).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a single job.
            /// </summary>
            /// <remarks>
            /// Required permissions: Jobs.View.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// key: Id
            /// </param>
            /// <param name='expand'>
            /// Expands related entities inline.
            /// </param>
            /// <param name='select'>
            /// Selects which properties to include in the response.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<JobDto> GetByIdAsync(this IJobs operations, long id, string expand = default(string), string select = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetByIdWithHttpMessagesAsync(id, expand, select, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Replace entity in EntitySet Jobs
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// key: Id
            /// </param>
            /// <param name='jobDto'>
            /// The entity to put
            /// </param>
            public static void PutById(this IJobs operations, long id, JobDto jobDto)
            {
                operations.PutByIdAsync(id, jobDto).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Replace entity in EntitySet Jobs
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// key: Id
            /// </param>
            /// <param name='jobDto'>
            /// The entity to put
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PutByIdAsync(this IJobs operations, long id, JobDto jobDto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                (await operations.PutByIdWithHttpMessagesAsync(id, jobDto, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Adds a new job and sets it in Pending state for each robot based on the
            /// input parameters and notifies the respective robots about the pending job.
            /// </summary>
            /// <remarks>
            /// Required permissions: Jobs.Create.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='startJobParameters'>
            /// StartInfo - The information required to register the new jobs.
            /// </param>
            public static ODataResponseListJobDto StartJobs(this IJobs operations, StartJobParameters startJobParameters = default(StartJobParameters))
            {
                return operations.StartJobsAsync(startJobParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a new job and sets it in Pending state for each robot based on the
            /// input parameters and notifies the respective robots about the pending job.
            /// </summary>
            /// <remarks>
            /// Required permissions: Jobs.Create.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='startJobParameters'>
            /// StartInfo - The information required to register the new jobs.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ODataResponseListJobDto> StartJobsAsync(this IJobs operations, StartJobParameters startJobParameters = default(StartJobParameters), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.StartJobsWithHttpMessagesAsync(startJobParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Cancels or terminates the specified job.
            /// </summary>
            /// <remarks>
            /// Required permissions: Jobs.Edit.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// key: Id
            /// </param>
            /// <param name='stopJobParameters'>
            /// Strategy - States whether a job should be soft stopped or killed
            /// immediately.
            /// </param>
            public static void StopJobById(this IJobs operations, long id, StopJobParameters stopJobParameters)
            {
                operations.StopJobByIdAsync(id, stopJobParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Cancels or terminates the specified job.
            /// </summary>
            /// <remarks>
            /// Required permissions: Jobs.Edit.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// key: Id
            /// </param>
            /// <param name='stopJobParameters'>
            /// Strategy - States whether a job should be soft stopped or killed
            /// immediately.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task StopJobByIdAsync(this IJobs operations, long id, StopJobParameters stopJobParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                (await operations.StopJobByIdWithHttpMessagesAsync(id, stopJobParameters, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Cancels or terminates the specified jobs.
            /// </summary>
            /// <remarks>
            /// Required permissions: Jobs.Edit.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='stopJobsParameters'>
            /// JobIds - The ids for the jobs to be canceled or terminated;
            /// Strategy - States whether a job should be soft stopped or killed
            /// immediately.
            /// </param>
            public static void StopJobs(this IJobs operations, StopJobsParameters stopJobsParameters)
            {
                operations.StopJobsAsync(stopJobsParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Cancels or terminates the specified jobs.
            /// </summary>
            /// <remarks>
            /// Required permissions: Jobs.Edit.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='stopJobsParameters'>
            /// JobIds - The ids for the jobs to be canceled or terminated;
            /// Strategy - States whether a job should be soft stopped or killed
            /// immediately.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task StopJobsAsync(this IJobs operations, StopJobsParameters stopJobsParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                (await operations.StopJobsWithHttpMessagesAsync(stopJobsParameters, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
