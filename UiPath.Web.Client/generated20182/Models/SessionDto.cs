// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace UiPath.Web.Client20182.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Stores information about the last status reported to Orchestrator by a
    /// registered robot.
    /// </summary>
    public partial class SessionDto
    {
        /// <summary>
        /// Initializes a new instance of the SessionDto class.
        /// </summary>
        public SessionDto()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SessionDto class.
        /// </summary>
        /// <param name="robot">The Robot for which the information is
        /// stored.</param>
        /// <param name="state">The value of the last reported status. Possible
        /// values include: 'Available', 'Busy', 'Disconnected',
        /// 'Unknown'</param>
        /// <param name="job">The Job that is executed by the robot.</param>
        /// <param name="reportingTime">The date and time when the last
        /// heartbeat came.</param>
        /// <param name="info">May store additional information about the robot
        /// state.</param>
        /// <param name="isUnresponsive">If the robot did not report status for
        /// longer than 120 seconds.</param>
        public SessionDto(RobotWithLicenseDto robot = default(RobotWithLicenseDto), SessionDtoState? state = default(SessionDtoState?), JobDto job = default(JobDto), System.DateTime? reportingTime = default(System.DateTime?), string info = default(string), bool? isUnresponsive = default(bool?), long? id = default(long?))
        {
            Robot = robot;
            State = state;
            Job = job;
            ReportingTime = reportingTime;
            Info = info;
            IsUnresponsive = isUnresponsive;
            Id = id;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the Robot for which the information is stored.
        /// </summary>
        [JsonProperty(PropertyName = "Robot")]
        public RobotWithLicenseDto Robot { get; set; }

        /// <summary>
        /// Gets or sets the value of the last reported status. Possible values
        /// include: 'Available', 'Busy', 'Disconnected', 'Unknown'
        /// </summary>
        [JsonProperty(PropertyName = "State")]
        public SessionDtoState? State { get; set; }

        /// <summary>
        /// Gets or sets the Job that is executed by the robot.
        /// </summary>
        [JsonProperty(PropertyName = "Job")]
        public JobDto Job { get; set; }

        /// <summary>
        /// Gets or sets the date and time when the last heartbeat came.
        /// </summary>
        [JsonProperty(PropertyName = "ReportingTime")]
        public System.DateTime? ReportingTime { get; set; }

        /// <summary>
        /// Gets or sets may store additional information about the robot
        /// state.
        /// </summary>
        [JsonProperty(PropertyName = "Info")]
        public string Info { get; set; }

        /// <summary>
        /// Gets or sets if the robot did not report status for longer than 120
        /// seconds.
        /// </summary>
        [JsonProperty(PropertyName = "IsUnresponsive")]
        public bool? IsUnresponsive { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Id")]
        public long? Id { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Robot != null)
            {
                Robot.Validate();
            }
            if (Job != null)
            {
                Job.Validate();
            }
        }
    }
}
