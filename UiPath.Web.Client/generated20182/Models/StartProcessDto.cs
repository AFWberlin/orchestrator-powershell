// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace UiPath.Web.Client20182.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The Start Process transfers information from client to the server
    /// during JobsController.StartJobs custom action.
    /// </summary>
    public partial class StartProcessDto
    {
        /// <summary>
        /// Initializes a new instance of the StartProcessDto class.
        /// </summary>
        public StartProcessDto()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the StartProcessDto class.
        /// </summary>
        /// <param name="releaseKey">The unique key of the release associated
        /// with the process.</param>
        /// <param name="strategy">States which robots from the environment are
        /// being run by the process. Possible values include: 'All',
        /// 'Specific', 'RobotCount'</param>
        /// <param name="robotIds">The collection of ids of specific robots
        /// selected to be run by the current process. This collection must be
        /// empty only if the start strategy is not 1 (Specific).</param>
        /// <param name="noOfRobots">The number of robots selected to be run by
        /// the current process. This number must be greater than 0 only if the
        /// start strategy is not 2 (RobotCount).</param>
        /// <param name="source">The Source of the job starting the current
        /// process. Possible values include: 'Manual', 'Schedule'</param>
        public StartProcessDto(string releaseKey, StartProcessDtoStrategy? strategy = default(StartProcessDtoStrategy?), IList<long?> robotIds = default(IList<long?>), int? noOfRobots = default(int?), StartProcessDtoSource? source = default(StartProcessDtoSource?))
        {
            ReleaseKey = releaseKey;
            Strategy = strategy;
            RobotIds = robotIds;
            NoOfRobots = noOfRobots;
            Source = source;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the unique key of the release associated with the
        /// process.
        /// </summary>
        [JsonProperty(PropertyName = "ReleaseKey")]
        public string ReleaseKey { get; set; }

        /// <summary>
        /// Gets or sets states which robots from the environment are being run
        /// by the process. Possible values include: 'All', 'Specific',
        /// 'RobotCount'
        /// </summary>
        [JsonProperty(PropertyName = "Strategy")]
        public StartProcessDtoStrategy? Strategy { get; set; }

        /// <summary>
        /// Gets or sets the collection of ids of specific robots selected to
        /// be run by the current process. This collection must be empty only
        /// if the start strategy is not 1 (Specific).
        /// </summary>
        [JsonProperty(PropertyName = "RobotIds")]
        public IList<long?> RobotIds { get; set; }

        /// <summary>
        /// Gets or sets the number of robots selected to be run by the current
        /// process. This number must be greater than 0 only if the start
        /// strategy is not 2 (RobotCount).
        /// </summary>
        [JsonProperty(PropertyName = "NoOfRobots")]
        public int? NoOfRobots { get; set; }

        /// <summary>
        /// Gets or sets the Source of the job starting the current process.
        /// Possible values include: 'Manual', 'Schedule'
        /// </summary>
        [JsonProperty(PropertyName = "Source")]
        public StartProcessDtoSource? Source { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ReleaseKey == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ReleaseKey");
            }
        }
    }
}
