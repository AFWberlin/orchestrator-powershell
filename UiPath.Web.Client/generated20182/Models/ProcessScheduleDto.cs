// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace UiPath.Web.Client20182.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Defines the schedule of a process that can be executed at regular
    /// intervals, on selected Robots, all of them or a specified number of
    /// Robots.
    /// </summary>
    public partial class ProcessScheduleDto
    {
        /// <summary>
        /// Initializes a new instance of the ProcessScheduleDto class.
        /// </summary>
        public ProcessScheduleDto()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ProcessScheduleDto class.
        /// </summary>
        /// <param name="name">The name of the schedule.</param>
        /// <param name="enabled">Specifies if the schedule is active or
        /// not.</param>
        /// <param name="releaseId">The Id of the process associated with the
        /// schedule.</param>
        /// <param name="releaseKey">The unique key of the process associated
        /// with the schedule.</param>
        /// <param name="releaseName">The name of the process associated with
        /// the schedule.</param>
        /// <param name="packageName">The name of the package to be triggered
        /// with the schedule.</param>
        /// <param name="environmentName">The name of the environment
        /// associated with the schedule.</param>
        /// <param name="environmentId">The Id of the environment associated
        /// with the schedule.</param>
        /// <param name="startProcessCron">The start cron expression of the
        /// schedule.</param>
        /// <param name="startProcessCronDetails">Various details that can be
        /// associated to the time period expression of the schedule.</param>
        /// <param name="startProcessCronSummary">Human readable form of cron
        /// expression of the schedule.</param>
        /// <param name="startProcessNextOccurrence">The date and time when the
        /// associated process will be run next.</param>
        /// <param name="startStrategy">States which robots from the
        /// environment are being run by the schedule.</param>
        /// <param name="executorRobots">The collection of specific robots
        /// selected to be targeted by the current schedule. This collection
        /// must be empty if the start strategy is not 0 (specific
        /// robots).</param>
        /// <param name="stopProcessExpression">The cron expression after which
        /// a running process will be stopped.</param>
        /// <param name="stopStrategy">The way a running process is stopped.
        /// Possible values include: 'SoftStop', 'Kill'</param>
        /// <param name="externalJobKey">The unique identifier of the external
        /// job associated with the jobs generated by this schedule. A key is
        /// generated for each group of jobs triggered by this
        /// schedule.</param>
        /// <param name="timeZoneId">The timezone under which the schedule will
        /// run.</param>
        /// <param name="timeZoneIana">The timezone under which the schedule
        /// will run in Iana Standard.</param>
        public ProcessScheduleDto(string name, bool? enabled = default(bool?), long? releaseId = default(long?), string releaseKey = default(string), string releaseName = default(string), string packageName = default(string), string environmentName = default(string), string environmentId = default(string), string startProcessCron = default(string), string startProcessCronDetails = default(string), string startProcessCronSummary = default(string), System.DateTime? startProcessNextOccurrence = default(System.DateTime?), int? startStrategy = default(int?), IList<RobotExecutorDto> executorRobots = default(IList<RobotExecutorDto>), string stopProcessExpression = default(string), ProcessScheduleDtoStopStrategy? stopStrategy = default(ProcessScheduleDtoStopStrategy?), string externalJobKey = default(string), string timeZoneId = default(string), string timeZoneIana = default(string), long? id = default(long?))
        {
            Enabled = enabled;
            Name = name;
            ReleaseId = releaseId;
            ReleaseKey = releaseKey;
            ReleaseName = releaseName;
            PackageName = packageName;
            EnvironmentName = environmentName;
            EnvironmentId = environmentId;
            StartProcessCron = startProcessCron;
            StartProcessCronDetails = startProcessCronDetails;
            StartProcessCronSummary = startProcessCronSummary;
            StartProcessNextOccurrence = startProcessNextOccurrence;
            StartStrategy = startStrategy;
            ExecutorRobots = executorRobots;
            StopProcessExpression = stopProcessExpression;
            StopStrategy = stopStrategy;
            ExternalJobKey = externalJobKey;
            TimeZoneId = timeZoneId;
            TimeZoneIana = timeZoneIana;
            Id = id;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets specifies if the schedule is active or not.
        /// </summary>
        [JsonProperty(PropertyName = "Enabled")]
        public bool? Enabled { get; set; }

        /// <summary>
        /// Gets or sets the name of the schedule.
        /// </summary>
        [JsonProperty(PropertyName = "Name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the Id of the process associated with the schedule.
        /// </summary>
        [JsonProperty(PropertyName = "ReleaseId")]
        public long? ReleaseId { get; set; }

        /// <summary>
        /// Gets or sets the unique key of the process associated with the
        /// schedule.
        /// </summary>
        [JsonProperty(PropertyName = "ReleaseKey")]
        public string ReleaseKey { get; set; }

        /// <summary>
        /// Gets or sets the name of the process associated with the schedule.
        /// </summary>
        [JsonProperty(PropertyName = "ReleaseName")]
        public string ReleaseName { get; set; }

        /// <summary>
        /// Gets or sets the name of the package to be triggered with the
        /// schedule.
        /// </summary>
        [JsonProperty(PropertyName = "PackageName")]
        public string PackageName { get; set; }

        /// <summary>
        /// Gets or sets the name of the environment associated with the
        /// schedule.
        /// </summary>
        [JsonProperty(PropertyName = "EnvironmentName")]
        public string EnvironmentName { get; set; }

        /// <summary>
        /// Gets or sets the Id of the environment associated with the
        /// schedule.
        /// </summary>
        [JsonProperty(PropertyName = "EnvironmentId")]
        public string EnvironmentId { get; set; }

        /// <summary>
        /// Gets or sets the start cron expression of the schedule.
        /// </summary>
        [JsonProperty(PropertyName = "StartProcessCron")]
        public string StartProcessCron { get; set; }

        /// <summary>
        /// Gets or sets various details that can be associated to the time
        /// period expression of the schedule.
        /// </summary>
        [JsonProperty(PropertyName = "StartProcessCronDetails")]
        public string StartProcessCronDetails { get; set; }

        /// <summary>
        /// Gets or sets human readable form of cron expression of the
        /// schedule.
        /// </summary>
        [JsonProperty(PropertyName = "StartProcessCronSummary")]
        public string StartProcessCronSummary { get; set; }

        /// <summary>
        /// Gets or sets the date and time when the associated process will be
        /// run next.
        /// </summary>
        [JsonProperty(PropertyName = "StartProcessNextOccurrence")]
        public System.DateTime? StartProcessNextOccurrence { get; set; }

        /// <summary>
        /// Gets or sets states which robots from the environment are being run
        /// by the schedule.
        /// </summary>
        [JsonProperty(PropertyName = "StartStrategy")]
        public int? StartStrategy { get; set; }

        /// <summary>
        /// Gets or sets the collection of specific robots selected to be
        /// targeted by the current schedule. This collection must be empty if
        /// the start strategy is not 0 (specific robots).
        /// </summary>
        [JsonProperty(PropertyName = "ExecutorRobots")]
        public IList<RobotExecutorDto> ExecutorRobots { get; set; }

        /// <summary>
        /// Gets or sets the cron expression after which a running process will
        /// be stopped.
        /// </summary>
        [JsonProperty(PropertyName = "StopProcessExpression")]
        public string StopProcessExpression { get; set; }

        /// <summary>
        /// Gets or sets the way a running process is stopped. Possible values
        /// include: 'SoftStop', 'Kill'
        /// </summary>
        [JsonProperty(PropertyName = "StopStrategy")]
        public ProcessScheduleDtoStopStrategy? StopStrategy { get; set; }

        /// <summary>
        /// Gets or sets the unique identifier of the external job associated
        /// with the jobs generated by this schedule. A key is generated for
        /// each group of jobs triggered by this schedule.
        /// </summary>
        [JsonProperty(PropertyName = "ExternalJobKey")]
        public string ExternalJobKey { get; set; }

        /// <summary>
        /// Gets or sets the timezone under which the schedule will run.
        /// </summary>
        [JsonProperty(PropertyName = "TimeZoneId")]
        public string TimeZoneId { get; set; }

        /// <summary>
        /// Gets or sets the timezone under which the schedule will run in Iana
        /// Standard.
        /// </summary>
        [JsonProperty(PropertyName = "TimeZoneIana")]
        public string TimeZoneIana { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Id")]
        public long? Id { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
        }
    }
}
